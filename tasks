;;- create strings for errors int the .rodata
;;- create a constant to save 5 (maximum size of stack)
;; - create a counter that will track on the stack size
;; - create a variable for debug mode
;; - convert each 2 bytes from the input to BCD
;; - create a label 'stack'
		initialize the first 4 bytes (the address that points to the first argument in the stack) with null (0)
;; - every prompt, clean the input buffer so that there won't be any reminders on it from the last promt
;; - handle wierd inputs such as:
	;; 001 (zeros in the begining)- remove all leading zeros
	;; 0- create a single link of [0,NULL]
	;; 0000- remove all leading zeros and create a single link of [0, NULL]
	;; empty string input
;; - create a loop in my_calc which waits for input, do something and them go back in a loop to get an input again (use fgets). this prints ">>calc: "

;; - set debug mode to 1 when executing with "-d"
;; - handle debug modes
;; - every push to the stack we locate the new argument at [stack + 4*stack_pointer]
;; - create a label that loops for getting two numbers (12 for example) and create a link from then and concatenate the link to the adequate list by:
	check if there is enough space in the stack. if not, send an error.
	else:
	use mallok to make space on the heap for the link (5 byets)
	store somewhere the address of the link that is now in the heap
	the new link will point on the link that the list points on (the address on the stack)
	the list will point on the new link (which we have stored its address beforehand)
;; - imlplement feature p (prints ">>" instaed of ">>calc")

;; - imlplement feature d 
;; - imlplement feature +
- imlplement feature r
- imlplement feature l
- add debug message for every result producing operation
- free mempry of all links
- write tests
- remove label func_format
- remove label print_for_myself
- remove label fail_exit
- remove label debug_print_format

tests:
	001 (zeros in the begining)- remove all leading zeros
	0- create a single link of [0,NULL]
	0000- remove all leading zeros and create a single link of [0, NULL]
	empty string input
	
	l:
		n = 0, k <= 0
		n >= 0, k = 0



    ;////////////////
        push print_arrow
        push format_str
        call printf
        add esp, 8
    ;////////////////



;----
call print_for_myself
;----

0x0804c838

    ;---
    push eax
    push eax
    call len
    add esp, 4

    push eax
    push format_int
    call printf
    add esp, 8
    pop eax
    ;---

            ;---
            pushad
            push dword [ebp-16]
            call print_num
            add esp, 4
            popad
            ;---

;---
pushad
push dword [ebp-8]
call print_num
add esp, 4
popad
;---
;---
pushad
push dword [ebp-12]
push format_int
call printf
add esp, 8
popad
;---
;print newline
;////////////////
push str_newlinw
push format_strln
call printf
add esp, 8
;////////////////
